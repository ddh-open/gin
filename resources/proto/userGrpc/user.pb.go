// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.3
// source: user.proto

package userGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserLoginType int32

const (
	UserLoginType_Local UserLoginType = 0
	UserLoginType_AD    UserLoginType = 1
)

// Enum value maps for UserLoginType.
var (
	UserLoginType_name = map[int32]string{
		0: "Local",
		1: "AD",
	}
	UserLoginType_value = map[string]int32{
		"Local": 0,
		"AD":    1,
	}
)

func (x UserLoginType) Enum() *UserLoginType {
	p := new(UserLoginType)
	*p = x
	return p
}

func (x UserLoginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserLoginType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[0].Descriptor()
}

func (UserLoginType) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[0]
}

func (x UserLoginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserLoginType.Descriptor instead.
func (UserLoginType) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

// 带有id和类型的请求参数
type WithSliderParamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PType      string   `protobuf:"bytes,1,opt,name=pType,proto3" json:"pType,omitempty"`
	FieldIndex int64    `protobuf:"varint,2,opt,name=fieldIndex,proto3" json:"fieldIndex,omitempty"`
	FieldValue []string `protobuf:"bytes,3,rep,name=fieldValue,proto3" json:"fieldValue,omitempty"`
}

func (x *WithSliderParamRequest) Reset() {
	*x = WithSliderParamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithSliderParamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithSliderParamRequest) ProtoMessage() {}

func (x *WithSliderParamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithSliderParamRequest.ProtoReflect.Descriptor instead.
func (*WithSliderParamRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

func (x *WithSliderParamRequest) GetPType() string {
	if x != nil {
		return x.PType
	}
	return ""
}

func (x *WithSliderParamRequest) GetFieldIndex() int64 {
	if x != nil {
		return x.FieldIndex
	}
	return 0
}

func (x *WithSliderParamRequest) GetFieldValue() []string {
	if x != nil {
		return x.FieldValue
	}
	return nil
}

// 带有id和类型的请求参数
type WithBytesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CodeResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Data   []byte      `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *WithBytesResponse) Reset() {
	*x = WithBytesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithBytesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithBytesResponse) ProtoMessage() {}

func (x *WithBytesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithBytesResponse.ProtoReflect.Descriptor instead.
func (*WithBytesResponse) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

func (x *WithBytesResponse) GetResult() *CodeResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *WithBytesResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 数据列表查询接口
type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64    `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize int64    `protobuf:"varint,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	Filter   []string `protobuf:"bytes,3,rep,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{2}
}

func (x *ListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRequest) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   *CodeResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Page     int64       `protobuf:"varint,2,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize int64       `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	Counts   int64       `protobuf:"varint,4,opt,name=Counts,proto3" json:"Counts,omitempty"`
	List     []byte      `protobuf:"bytes,5,opt,name=List,proto3" json:"List,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{3}
}

func (x *ListResponse) GetResult() *CodeResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ListResponse) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListResponse) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListResponse) GetCounts() int64 {
	if x != nil {
		return x.Counts
	}
	return 0
}

func (x *ListResponse) GetList() []byte {
	if x != nil {
		return x.List
	}
	return nil
}

// 数据新增和修改接口
type BytesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *BytesRequest) Reset() {
	*x = BytesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesRequest) ProtoMessage() {}

func (x *BytesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesRequest.ProtoReflect.Descriptor instead.
func (*BytesRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{4}
}

func (x *BytesRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 传数据ids的接口
type IdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IdsRequest) Reset() {
	*x = IdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdsRequest) ProtoMessage() {}

func (x *IdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdsRequest.ProtoReflect.Descriptor instead.
func (*IdsRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{5}
}

func (x *IdsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type AuthApiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CodeResult   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	User   *BaseUserInfo `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AuthApiResponse) Reset() {
	*x = AuthApiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthApiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthApiResponse) ProtoMessage() {}

func (x *AuthApiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthApiResponse.ProtoReflect.Descriptor instead.
func (*AuthApiResponse) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{6}
}

func (x *AuthApiResponse) GetResult() *CodeResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *AuthApiResponse) GetUser() *BaseUserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type BaseUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Id       uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Nickname string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *BaseUserInfo) Reset() {
	*x = BaseUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseUserInfo) ProtoMessage() {}

func (x *BaseUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseUserInfo.ProtoReflect.Descriptor instead.
func (*BaseUserInfo) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{7}
}

func (x *BaseUserInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BaseUserInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseUserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BaseUserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

// 标准响应体
type CodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CodeResult) Reset() {
	*x = CodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeResult) ProtoMessage() {}

func (x *CodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeResult.ProtoReflect.Descriptor instead.
func (*CodeResult) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{8}
}

func (x *CodeResult) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CodeResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type WithNothingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WithNothingRequest) Reset() {
	*x = WithNothingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithNothingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithNothingRequest) ProtoMessage() {}

func (x *WithNothingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithNothingRequest.ProtoReflect.Descriptor instead.
func (*WithNothingRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{9}
}

type GetUserInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetUserInfoRequest) Reset() {
	*x = GetUserInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoRequest) ProtoMessage() {}

func (x *GetUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoRequest.ProtoReflect.Descriptor instead.
func (*GetUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserInfoRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetUserInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   *CodeResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	UserId   int64       `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName string      `protobuf:"bytes,3,opt,name=UserName,proto3" json:"UserName,omitempty"`
}

func (x *GetUserInfoResponse) Reset() {
	*x = GetUserInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResponse) ProtoMessage() {}

func (x *GetUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResponse.ProtoReflect.Descriptor instead.
func (*GetUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{11}
}

func (x *GetUserInfoResponse) GetResult() *CodeResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetUserInfoResponse) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserInfoResponse) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type WithPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string        `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string        `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Type     UserLoginType `protobuf:"varint,3,opt,name=type,proto3,enum=proto.UserLoginType" json:"type,omitempty"` // 用户类型
}

func (x *WithPasswordRequest) Reset() {
	*x = WithPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithPasswordRequest) ProtoMessage() {}

func (x *WithPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithPasswordRequest.ProtoReflect.Descriptor instead.
func (*WithPasswordRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{12}
}

func (x *WithPasswordRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WithPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *WithPasswordRequest) GetType() UserLoginType {
	if x != nil {
		return x.Type
	}
	return UserLoginType_Local
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CodeResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Token  string      `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{13}
}

func (x *LoginResponse) GetResult() *CodeResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// api 权限
type AuthApiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *AuthApiRequest) Reset() {
	*x = AuthApiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthApiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthApiRequest) ProtoMessage() {}

func (x *AuthApiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthApiRequest.ProtoReflect.Descriptor instead.
func (*AuthApiRequest) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{14}
}

func (x *AuthApiRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_user_proto protoreflect.FileDescriptor

var file_user_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x6e, 0x0a, 0x16, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x52, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x95,
	0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x0c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1e, 0x0a, 0x0a, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x65, 0x0a, 0x0f, 0x41, 0x75,
	0x74, 0x68, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x6a, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a,
	0x0a, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x14, 0x0a, 0x12, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x13, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x50, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x24, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x2a, 0x22, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x44, 0x10, 0x01,
	0x32, 0xe2, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x69, 0x12,
	0x32, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x41, 0x64, 0x64, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x09, 0x41, 0x70, 0x69, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x09, 0x41, 0x70,
	0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x34, 0x0a, 0x07, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xec, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x64, 0x64, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0xe7, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x12,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x52, 0x6f, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x34, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xe7,
	0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x33,
	0x0a, 0x07, 0x4d, 0x65, 0x6e, 0x75, 0x41, 0x64, 0x64, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x4d, 0x65, 0x6e, 0x75, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0a, 0x4d,
	0x65, 0x6e, 0x75, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xc9, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x43, 0x61, 0x62,
	0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0f, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x3b, 0x0a, 0x0f, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x0d, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x62, 0x69, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0xf1, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x41, 0x64, 0x64, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x49, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x68, 0x41,
	0x70, 0x69, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x41,
	0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x32, 0x89, 0x02, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x05, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42,
	0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_proto_rawDescOnce sync.Once
	file_user_proto_rawDescData = file_user_proto_rawDesc
)

func file_user_proto_rawDescGZIP() []byte {
	file_user_proto_rawDescOnce.Do(func() {
		file_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_proto_rawDescData)
	})
	return file_user_proto_rawDescData
}

var file_user_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_user_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_user_proto_goTypes = []interface{}{
	(UserLoginType)(0),             // 0: proto.UserLoginType
	(*WithSliderParamRequest)(nil), // 1: proto.WithSliderParamRequest
	(*WithBytesResponse)(nil),      // 2: proto.WithBytesResponse
	(*ListRequest)(nil),            // 3: proto.ListRequest
	(*ListResponse)(nil),           // 4: proto.ListResponse
	(*BytesRequest)(nil),           // 5: proto.BytesRequest
	(*IdsRequest)(nil),             // 6: proto.IdsRequest
	(*AuthApiResponse)(nil),        // 7: proto.AuthApiResponse
	(*BaseUserInfo)(nil),           // 8: proto.BaseUserInfo
	(*CodeResult)(nil),             // 9: proto.CodeResult
	(*WithNothingRequest)(nil),     // 10: proto.WithNothingRequest
	(*GetUserInfoRequest)(nil),     // 11: proto.GetUserInfoRequest
	(*GetUserInfoResponse)(nil),    // 12: proto.GetUserInfoResponse
	(*WithPasswordRequest)(nil),    // 13: proto.WithPasswordRequest
	(*LoginResponse)(nil),          // 14: proto.LoginResponse
	(*AuthApiRequest)(nil),         // 15: proto.AuthApiRequest
}
var file_user_proto_depIdxs = []int32{
	9,  // 0: proto.WithBytesResponse.result:type_name -> proto.CodeResult
	9,  // 1: proto.ListResponse.result:type_name -> proto.CodeResult
	9,  // 2: proto.AuthApiResponse.result:type_name -> proto.CodeResult
	8,  // 3: proto.AuthApiResponse.user:type_name -> proto.BaseUserInfo
	9,  // 4: proto.GetUserInfoResponse.result:type_name -> proto.CodeResult
	0,  // 5: proto.WithPasswordRequest.type:type_name -> proto.UserLoginType
	9,  // 6: proto.LoginResponse.result:type_name -> proto.CodeResult
	5,  // 7: proto.ServiceApi.ApiAdd:input_type -> proto.BytesRequest
	5,  // 8: proto.ServiceApi.ApiModify:input_type -> proto.BytesRequest
	6,  // 9: proto.ServiceApi.ApiDelete:input_type -> proto.IdsRequest
	3,  // 10: proto.ServiceApi.ApiList:input_type -> proto.ListRequest
	5,  // 11: proto.ServiceGroup.GroupAdd:input_type -> proto.BytesRequest
	5,  // 12: proto.ServiceGroup.GroupModify:input_type -> proto.BytesRequest
	6,  // 13: proto.ServiceGroup.GroupDelete:input_type -> proto.IdsRequest
	3,  // 14: proto.ServiceGroup.GroupList:input_type -> proto.ListRequest
	5,  // 15: proto.ServiceRole.RoleAdd:input_type -> proto.BytesRequest
	5,  // 16: proto.ServiceRole.RoleModify:input_type -> proto.BytesRequest
	6,  // 17: proto.ServiceRole.RoleDelete:input_type -> proto.IdsRequest
	3,  // 18: proto.ServiceRole.RoleList:input_type -> proto.ListRequest
	5,  // 19: proto.ServiceMenu.MenuAdd:input_type -> proto.BytesRequest
	5,  // 20: proto.ServiceMenu.MenuModify:input_type -> proto.BytesRequest
	6,  // 21: proto.ServiceMenu.MenuDelete:input_type -> proto.IdsRequest
	3,  // 22: proto.ServiceMenu.MenuList:input_type -> proto.ListRequest
	5,  // 23: proto.ServiceCabin.CabinRuleAdd:input_type -> proto.BytesRequest
	5,  // 24: proto.ServiceCabin.CabinRuleModify:input_type -> proto.BytesRequest
	5,  // 25: proto.ServiceCabin.CabinRuleDelete:input_type -> proto.BytesRequest
	3,  // 26: proto.ServiceCabin.CabinRuleList:input_type -> proto.ListRequest
	1,  // 27: proto.ServiceCabin.GetCabinById:input_type -> proto.WithSliderParamRequest
	5,  // 28: proto.ServiceDomain.DomainAdd:input_type -> proto.BytesRequest
	5,  // 29: proto.ServiceDomain.DomainModify:input_type -> proto.BytesRequest
	6,  // 30: proto.ServiceDomain.DomainDelete:input_type -> proto.IdsRequest
	3,  // 31: proto.ServiceDomain.DomainList:input_type -> proto.ListRequest
	15, // 32: proto.ServiceAuth.AuthApi:input_type -> proto.AuthApiRequest
	11, // 33: proto.UserService.GetUserInfo:input_type -> proto.GetUserInfoRequest
	13, // 34: proto.UserService.Login:input_type -> proto.WithPasswordRequest
	10, // 35: proto.UserService.Logout:input_type -> proto.WithNothingRequest
	13, // 36: proto.UserService.Register:input_type -> proto.WithPasswordRequest
	9,  // 37: proto.ServiceApi.ApiAdd:output_type -> proto.CodeResult
	9,  // 38: proto.ServiceApi.ApiModify:output_type -> proto.CodeResult
	9,  // 39: proto.ServiceApi.ApiDelete:output_type -> proto.CodeResult
	4,  // 40: proto.ServiceApi.ApiList:output_type -> proto.ListResponse
	9,  // 41: proto.ServiceGroup.GroupAdd:output_type -> proto.CodeResult
	9,  // 42: proto.ServiceGroup.GroupModify:output_type -> proto.CodeResult
	9,  // 43: proto.ServiceGroup.GroupDelete:output_type -> proto.CodeResult
	4,  // 44: proto.ServiceGroup.GroupList:output_type -> proto.ListResponse
	9,  // 45: proto.ServiceRole.RoleAdd:output_type -> proto.CodeResult
	9,  // 46: proto.ServiceRole.RoleModify:output_type -> proto.CodeResult
	9,  // 47: proto.ServiceRole.RoleDelete:output_type -> proto.CodeResult
	4,  // 48: proto.ServiceRole.RoleList:output_type -> proto.ListResponse
	9,  // 49: proto.ServiceMenu.MenuAdd:output_type -> proto.CodeResult
	9,  // 50: proto.ServiceMenu.MenuModify:output_type -> proto.CodeResult
	9,  // 51: proto.ServiceMenu.MenuDelete:output_type -> proto.CodeResult
	4,  // 52: proto.ServiceMenu.MenuList:output_type -> proto.ListResponse
	9,  // 53: proto.ServiceCabin.CabinRuleAdd:output_type -> proto.CodeResult
	9,  // 54: proto.ServiceCabin.CabinRuleModify:output_type -> proto.CodeResult
	9,  // 55: proto.ServiceCabin.CabinRuleDelete:output_type -> proto.CodeResult
	4,  // 56: proto.ServiceCabin.CabinRuleList:output_type -> proto.ListResponse
	2,  // 57: proto.ServiceCabin.GetCabinById:output_type -> proto.WithBytesResponse
	9,  // 58: proto.ServiceDomain.DomainAdd:output_type -> proto.CodeResult
	9,  // 59: proto.ServiceDomain.DomainModify:output_type -> proto.CodeResult
	9,  // 60: proto.ServiceDomain.DomainDelete:output_type -> proto.CodeResult
	4,  // 61: proto.ServiceDomain.DomainList:output_type -> proto.ListResponse
	7,  // 62: proto.ServiceAuth.AuthApi:output_type -> proto.AuthApiResponse
	12, // 63: proto.UserService.GetUserInfo:output_type -> proto.GetUserInfoResponse
	14, // 64: proto.UserService.Login:output_type -> proto.LoginResponse
	9,  // 65: proto.UserService.Logout:output_type -> proto.CodeResult
	9,  // 66: proto.UserService.Register:output_type -> proto.CodeResult
	37, // [37:67] is the sub-list for method output_type
	7,  // [7:37] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_user_proto_init() }
func file_user_proto_init() {
	if File_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithSliderParamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithBytesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthApiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithNothingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthApiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   8,
		},
		GoTypes:           file_user_proto_goTypes,
		DependencyIndexes: file_user_proto_depIdxs,
		EnumInfos:         file_user_proto_enumTypes,
		MessageInfos:      file_user_proto_msgTypes,
	}.Build()
	File_user_proto = out.File
	file_user_proto_rawDesc = nil
	file_user_proto_goTypes = nil
	file_user_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceApiClient is the client API for ServiceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceApiClient interface {
	// api新增和修改
	ApiAdd(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error)
	ApiModify(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error)
	ApiDelete(ctx context.Context, in *IdsRequest, opts ...grpc.CallOption) (*CodeResult, error)
	ApiList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type serviceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceApiClient(cc grpc.ClientConnInterface) ServiceApiClient {
	return &serviceApiClient{cc}
}

func (c *serviceApiClient) ApiAdd(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceApi/ApiAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceApiClient) ApiModify(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceApi/ApiModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceApiClient) ApiDelete(ctx context.Context, in *IdsRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceApi/ApiDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceApiClient) ApiList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/proto.ServiceApi/ApiList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceApiServer is the server API for ServiceApi service.
type ServiceApiServer interface {
	// api新增和修改
	ApiAdd(context.Context, *BytesRequest) (*CodeResult, error)
	ApiModify(context.Context, *BytesRequest) (*CodeResult, error)
	ApiDelete(context.Context, *IdsRequest) (*CodeResult, error)
	ApiList(context.Context, *ListRequest) (*ListResponse, error)
}

// UnimplementedServiceApiServer can be embedded to have forward compatible implementations.
type UnimplementedServiceApiServer struct {
}

func (*UnimplementedServiceApiServer) ApiAdd(context.Context, *BytesRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiAdd not implemented")
}
func (*UnimplementedServiceApiServer) ApiModify(context.Context, *BytesRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiModify not implemented")
}
func (*UnimplementedServiceApiServer) ApiDelete(context.Context, *IdsRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiDelete not implemented")
}
func (*UnimplementedServiceApiServer) ApiList(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiList not implemented")
}

func RegisterServiceApiServer(s *grpc.Server, srv ServiceApiServer) {
	s.RegisterService(&_ServiceApi_serviceDesc, srv)
}

func _ServiceApi_ApiAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceApiServer).ApiAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceApi/ApiAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceApiServer).ApiAdd(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceApi_ApiModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceApiServer).ApiModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceApi/ApiModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceApiServer).ApiModify(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceApi_ApiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceApiServer).ApiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceApi/ApiDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceApiServer).ApiDelete(ctx, req.(*IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceApi_ApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceApiServer).ApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceApi/ApiList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceApiServer).ApiList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServiceApi",
	HandlerType: (*ServiceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiAdd",
			Handler:    _ServiceApi_ApiAdd_Handler,
		},
		{
			MethodName: "ApiModify",
			Handler:    _ServiceApi_ApiModify_Handler,
		},
		{
			MethodName: "ApiDelete",
			Handler:    _ServiceApi_ApiDelete_Handler,
		},
		{
			MethodName: "ApiList",
			Handler:    _ServiceApi_ApiList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// ServiceGroupClient is the client API for ServiceGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceGroupClient interface {
	// 组新增和修改
	GroupAdd(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error)
	GroupModify(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error)
	GroupDelete(ctx context.Context, in *IdsRequest, opts ...grpc.CallOption) (*CodeResult, error)
	GroupList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type serviceGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceGroupClient(cc grpc.ClientConnInterface) ServiceGroupClient {
	return &serviceGroupClient{cc}
}

func (c *serviceGroupClient) GroupAdd(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceGroup/GroupAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceGroupClient) GroupModify(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceGroup/GroupModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceGroupClient) GroupDelete(ctx context.Context, in *IdsRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceGroup/GroupDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceGroupClient) GroupList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/proto.ServiceGroup/GroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceGroupServer is the server API for ServiceGroup service.
type ServiceGroupServer interface {
	// 组新增和修改
	GroupAdd(context.Context, *BytesRequest) (*CodeResult, error)
	GroupModify(context.Context, *BytesRequest) (*CodeResult, error)
	GroupDelete(context.Context, *IdsRequest) (*CodeResult, error)
	GroupList(context.Context, *ListRequest) (*ListResponse, error)
}

// UnimplementedServiceGroupServer can be embedded to have forward compatible implementations.
type UnimplementedServiceGroupServer struct {
}

func (*UnimplementedServiceGroupServer) GroupAdd(context.Context, *BytesRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAdd not implemented")
}
func (*UnimplementedServiceGroupServer) GroupModify(context.Context, *BytesRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupModify not implemented")
}
func (*UnimplementedServiceGroupServer) GroupDelete(context.Context, *IdsRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDelete not implemented")
}
func (*UnimplementedServiceGroupServer) GroupList(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupList not implemented")
}

func RegisterServiceGroupServer(s *grpc.Server, srv ServiceGroupServer) {
	s.RegisterService(&_ServiceGroup_serviceDesc, srv)
}

func _ServiceGroup_GroupAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceGroupServer).GroupAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceGroup/GroupAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceGroupServer).GroupAdd(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceGroup_GroupModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceGroupServer).GroupModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceGroup/GroupModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceGroupServer).GroupModify(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceGroup_GroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceGroupServer).GroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceGroup/GroupDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceGroupServer).GroupDelete(ctx, req.(*IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceGroup_GroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceGroupServer).GroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceGroup/GroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceGroupServer).GroupList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceGroup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServiceGroup",
	HandlerType: (*ServiceGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GroupAdd",
			Handler:    _ServiceGroup_GroupAdd_Handler,
		},
		{
			MethodName: "GroupModify",
			Handler:    _ServiceGroup_GroupModify_Handler,
		},
		{
			MethodName: "GroupDelete",
			Handler:    _ServiceGroup_GroupDelete_Handler,
		},
		{
			MethodName: "GroupList",
			Handler:    _ServiceGroup_GroupList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// ServiceRoleClient is the client API for ServiceRole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceRoleClient interface {
	// 角色新增和修改
	RoleAdd(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error)
	RoleModify(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error)
	RoleDelete(ctx context.Context, in *IdsRequest, opts ...grpc.CallOption) (*CodeResult, error)
	RoleList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type serviceRoleClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceRoleClient(cc grpc.ClientConnInterface) ServiceRoleClient {
	return &serviceRoleClient{cc}
}

func (c *serviceRoleClient) RoleAdd(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceRole/RoleAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRoleClient) RoleModify(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceRole/RoleModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRoleClient) RoleDelete(ctx context.Context, in *IdsRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceRole/RoleDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRoleClient) RoleList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/proto.ServiceRole/RoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceRoleServer is the server API for ServiceRole service.
type ServiceRoleServer interface {
	// 角色新增和修改
	RoleAdd(context.Context, *BytesRequest) (*CodeResult, error)
	RoleModify(context.Context, *BytesRequest) (*CodeResult, error)
	RoleDelete(context.Context, *IdsRequest) (*CodeResult, error)
	RoleList(context.Context, *ListRequest) (*ListResponse, error)
}

// UnimplementedServiceRoleServer can be embedded to have forward compatible implementations.
type UnimplementedServiceRoleServer struct {
}

func (*UnimplementedServiceRoleServer) RoleAdd(context.Context, *BytesRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleAdd not implemented")
}
func (*UnimplementedServiceRoleServer) RoleModify(context.Context, *BytesRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleModify not implemented")
}
func (*UnimplementedServiceRoleServer) RoleDelete(context.Context, *IdsRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleDelete not implemented")
}
func (*UnimplementedServiceRoleServer) RoleList(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleList not implemented")
}

func RegisterServiceRoleServer(s *grpc.Server, srv ServiceRoleServer) {
	s.RegisterService(&_ServiceRole_serviceDesc, srv)
}

func _ServiceRole_RoleAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRoleServer).RoleAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceRole/RoleAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRoleServer).RoleAdd(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRole_RoleModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRoleServer).RoleModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceRole/RoleModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRoleServer).RoleModify(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRole_RoleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRoleServer).RoleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceRole/RoleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRoleServer).RoleDelete(ctx, req.(*IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRole_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRoleServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceRole/RoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRoleServer).RoleList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceRole_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServiceRole",
	HandlerType: (*ServiceRoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoleAdd",
			Handler:    _ServiceRole_RoleAdd_Handler,
		},
		{
			MethodName: "RoleModify",
			Handler:    _ServiceRole_RoleModify_Handler,
		},
		{
			MethodName: "RoleDelete",
			Handler:    _ServiceRole_RoleDelete_Handler,
		},
		{
			MethodName: "RoleList",
			Handler:    _ServiceRole_RoleList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// ServiceMenuClient is the client API for ServiceMenu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceMenuClient interface {
	// 菜单新增和修改
	MenuAdd(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error)
	MenuModify(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error)
	MenuDelete(ctx context.Context, in *IdsRequest, opts ...grpc.CallOption) (*CodeResult, error)
	MenuList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type serviceMenuClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceMenuClient(cc grpc.ClientConnInterface) ServiceMenuClient {
	return &serviceMenuClient{cc}
}

func (c *serviceMenuClient) MenuAdd(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceMenu/MenuAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMenuClient) MenuModify(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceMenu/MenuModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMenuClient) MenuDelete(ctx context.Context, in *IdsRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceMenu/MenuDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMenuClient) MenuList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/proto.ServiceMenu/MenuList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceMenuServer is the server API for ServiceMenu service.
type ServiceMenuServer interface {
	// 菜单新增和修改
	MenuAdd(context.Context, *BytesRequest) (*CodeResult, error)
	MenuModify(context.Context, *BytesRequest) (*CodeResult, error)
	MenuDelete(context.Context, *IdsRequest) (*CodeResult, error)
	MenuList(context.Context, *ListRequest) (*ListResponse, error)
}

// UnimplementedServiceMenuServer can be embedded to have forward compatible implementations.
type UnimplementedServiceMenuServer struct {
}

func (*UnimplementedServiceMenuServer) MenuAdd(context.Context, *BytesRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuAdd not implemented")
}
func (*UnimplementedServiceMenuServer) MenuModify(context.Context, *BytesRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuModify not implemented")
}
func (*UnimplementedServiceMenuServer) MenuDelete(context.Context, *IdsRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuDelete not implemented")
}
func (*UnimplementedServiceMenuServer) MenuList(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuList not implemented")
}

func RegisterServiceMenuServer(s *grpc.Server, srv ServiceMenuServer) {
	s.RegisterService(&_ServiceMenu_serviceDesc, srv)
}

func _ServiceMenu_MenuAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMenuServer).MenuAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceMenu/MenuAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMenuServer).MenuAdd(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMenu_MenuModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMenuServer).MenuModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceMenu/MenuModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMenuServer).MenuModify(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMenu_MenuDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMenuServer).MenuDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceMenu/MenuDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMenuServer).MenuDelete(ctx, req.(*IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMenu_MenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMenuServer).MenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceMenu/MenuList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMenuServer).MenuList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceMenu_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServiceMenu",
	HandlerType: (*ServiceMenuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MenuAdd",
			Handler:    _ServiceMenu_MenuAdd_Handler,
		},
		{
			MethodName: "MenuModify",
			Handler:    _ServiceMenu_MenuModify_Handler,
		},
		{
			MethodName: "MenuDelete",
			Handler:    _ServiceMenu_MenuDelete_Handler,
		},
		{
			MethodName: "MenuList",
			Handler:    _ServiceMenu_MenuList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// ServiceCabinClient is the client API for ServiceCabin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceCabinClient interface {
	// api新增和修改
	CabinRuleAdd(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error)
	CabinRuleModify(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error)
	CabinRuleDelete(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error)
	CabinRuleList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// 根据id 获取用户权限
	GetCabinById(ctx context.Context, in *WithSliderParamRequest, opts ...grpc.CallOption) (*WithBytesResponse, error)
}

type serviceCabinClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceCabinClient(cc grpc.ClientConnInterface) ServiceCabinClient {
	return &serviceCabinClient{cc}
}

func (c *serviceCabinClient) CabinRuleAdd(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceCabin/CabinRuleAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCabinClient) CabinRuleModify(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceCabin/CabinRuleModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCabinClient) CabinRuleDelete(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceCabin/CabinRuleDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCabinClient) CabinRuleList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/proto.ServiceCabin/CabinRuleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCabinClient) GetCabinById(ctx context.Context, in *WithSliderParamRequest, opts ...grpc.CallOption) (*WithBytesResponse, error) {
	out := new(WithBytesResponse)
	err := c.cc.Invoke(ctx, "/proto.ServiceCabin/GetCabinById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceCabinServer is the server API for ServiceCabin service.
type ServiceCabinServer interface {
	// api新增和修改
	CabinRuleAdd(context.Context, *BytesRequest) (*CodeResult, error)
	CabinRuleModify(context.Context, *BytesRequest) (*CodeResult, error)
	CabinRuleDelete(context.Context, *BytesRequest) (*CodeResult, error)
	CabinRuleList(context.Context, *ListRequest) (*ListResponse, error)
	// 根据id 获取用户权限
	GetCabinById(context.Context, *WithSliderParamRequest) (*WithBytesResponse, error)
}

// UnimplementedServiceCabinServer can be embedded to have forward compatible implementations.
type UnimplementedServiceCabinServer struct {
}

func (*UnimplementedServiceCabinServer) CabinRuleAdd(context.Context, *BytesRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CabinRuleAdd not implemented")
}
func (*UnimplementedServiceCabinServer) CabinRuleModify(context.Context, *BytesRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CabinRuleModify not implemented")
}
func (*UnimplementedServiceCabinServer) CabinRuleDelete(context.Context, *BytesRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CabinRuleDelete not implemented")
}
func (*UnimplementedServiceCabinServer) CabinRuleList(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CabinRuleList not implemented")
}
func (*UnimplementedServiceCabinServer) GetCabinById(context.Context, *WithSliderParamRequest) (*WithBytesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCabinById not implemented")
}

func RegisterServiceCabinServer(s *grpc.Server, srv ServiceCabinServer) {
	s.RegisterService(&_ServiceCabin_serviceDesc, srv)
}

func _ServiceCabin_CabinRuleAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCabinServer).CabinRuleAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceCabin/CabinRuleAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCabinServer).CabinRuleAdd(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCabin_CabinRuleModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCabinServer).CabinRuleModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceCabin/CabinRuleModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCabinServer).CabinRuleModify(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCabin_CabinRuleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCabinServer).CabinRuleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceCabin/CabinRuleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCabinServer).CabinRuleDelete(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCabin_CabinRuleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCabinServer).CabinRuleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceCabin/CabinRuleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCabinServer).CabinRuleList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCabin_GetCabinById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithSliderParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCabinServer).GetCabinById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceCabin/GetCabinById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCabinServer).GetCabinById(ctx, req.(*WithSliderParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceCabin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServiceCabin",
	HandlerType: (*ServiceCabinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CabinRuleAdd",
			Handler:    _ServiceCabin_CabinRuleAdd_Handler,
		},
		{
			MethodName: "CabinRuleModify",
			Handler:    _ServiceCabin_CabinRuleModify_Handler,
		},
		{
			MethodName: "CabinRuleDelete",
			Handler:    _ServiceCabin_CabinRuleDelete_Handler,
		},
		{
			MethodName: "CabinRuleList",
			Handler:    _ServiceCabin_CabinRuleList_Handler,
		},
		{
			MethodName: "GetCabinById",
			Handler:    _ServiceCabin_GetCabinById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// ServiceDomainClient is the client API for ServiceDomain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceDomainClient interface {
	// 商户新增和修改
	DomainAdd(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error)
	DomainModify(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error)
	DomainDelete(ctx context.Context, in *IdsRequest, opts ...grpc.CallOption) (*CodeResult, error)
	DomainList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type serviceDomainClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceDomainClient(cc grpc.ClientConnInterface) ServiceDomainClient {
	return &serviceDomainClient{cc}
}

func (c *serviceDomainClient) DomainAdd(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceDomain/DomainAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDomainClient) DomainModify(ctx context.Context, in *BytesRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceDomain/DomainModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDomainClient) DomainDelete(ctx context.Context, in *IdsRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.ServiceDomain/DomainDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDomainClient) DomainList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/proto.ServiceDomain/DomainList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceDomainServer is the server API for ServiceDomain service.
type ServiceDomainServer interface {
	// 商户新增和修改
	DomainAdd(context.Context, *BytesRequest) (*CodeResult, error)
	DomainModify(context.Context, *BytesRequest) (*CodeResult, error)
	DomainDelete(context.Context, *IdsRequest) (*CodeResult, error)
	DomainList(context.Context, *ListRequest) (*ListResponse, error)
}

// UnimplementedServiceDomainServer can be embedded to have forward compatible implementations.
type UnimplementedServiceDomainServer struct {
}

func (*UnimplementedServiceDomainServer) DomainAdd(context.Context, *BytesRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainAdd not implemented")
}
func (*UnimplementedServiceDomainServer) DomainModify(context.Context, *BytesRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainModify not implemented")
}
func (*UnimplementedServiceDomainServer) DomainDelete(context.Context, *IdsRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainDelete not implemented")
}
func (*UnimplementedServiceDomainServer) DomainList(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainList not implemented")
}

func RegisterServiceDomainServer(s *grpc.Server, srv ServiceDomainServer) {
	s.RegisterService(&_ServiceDomain_serviceDesc, srv)
}

func _ServiceDomain_DomainAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDomainServer).DomainAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceDomain/DomainAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDomainServer).DomainAdd(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDomain_DomainModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDomainServer).DomainModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceDomain/DomainModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDomainServer).DomainModify(ctx, req.(*BytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDomain_DomainDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDomainServer).DomainDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceDomain/DomainDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDomainServer).DomainDelete(ctx, req.(*IdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDomain_DomainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDomainServer).DomainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceDomain/DomainList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDomainServer).DomainList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceDomain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServiceDomain",
	HandlerType: (*ServiceDomainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DomainAdd",
			Handler:    _ServiceDomain_DomainAdd_Handler,
		},
		{
			MethodName: "DomainModify",
			Handler:    _ServiceDomain_DomainModify_Handler,
		},
		{
			MethodName: "DomainDelete",
			Handler:    _ServiceDomain_DomainDelete_Handler,
		},
		{
			MethodName: "DomainList",
			Handler:    _ServiceDomain_DomainList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// ServiceAuthClient is the client API for ServiceAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceAuthClient interface {
	// 权限相关
	AuthApi(ctx context.Context, in *AuthApiRequest, opts ...grpc.CallOption) (*AuthApiResponse, error)
}

type serviceAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAuthClient(cc grpc.ClientConnInterface) ServiceAuthClient {
	return &serviceAuthClient{cc}
}

func (c *serviceAuthClient) AuthApi(ctx context.Context, in *AuthApiRequest, opts ...grpc.CallOption) (*AuthApiResponse, error) {
	out := new(AuthApiResponse)
	err := c.cc.Invoke(ctx, "/proto.ServiceAuth/AuthApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAuthServer is the server API for ServiceAuth service.
type ServiceAuthServer interface {
	// 权限相关
	AuthApi(context.Context, *AuthApiRequest) (*AuthApiResponse, error)
}

// UnimplementedServiceAuthServer can be embedded to have forward compatible implementations.
type UnimplementedServiceAuthServer struct {
}

func (*UnimplementedServiceAuthServer) AuthApi(context.Context, *AuthApiRequest) (*AuthApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthApi not implemented")
}

func RegisterServiceAuthServer(s *grpc.Server, srv ServiceAuthServer) {
	s.RegisterService(&_ServiceAuth_serviceDesc, srv)
}

func _ServiceAuth_AuthApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAuthServer).AuthApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ServiceAuth/AuthApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAuthServer).AuthApi(ctx, req.(*AuthApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServiceAuth",
	HandlerType: (*ServiceAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthApi",
			Handler:    _ServiceAuth_AuthApi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// 用户相关
	Login(ctx context.Context, in *WithPasswordRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *WithNothingRequest, opts ...grpc.CallOption) (*CodeResult, error)
	Register(ctx context.Context, in *WithPasswordRequest, opts ...grpc.CallOption) (*CodeResult, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *WithPasswordRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Logout(ctx context.Context, in *WithNothingRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.UserService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Register(ctx context.Context, in *WithPasswordRequest, opts ...grpc.CallOption) (*CodeResult, error) {
	out := new(CodeResult)
	err := c.cc.Invoke(ctx, "/proto.UserService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	// 用户相关
	Login(context.Context, *WithPasswordRequest) (*LoginResponse, error)
	Logout(context.Context, *WithNothingRequest) (*CodeResult, error)
	Register(context.Context, *WithPasswordRequest) (*CodeResult, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (*UnimplementedUserServiceServer) Login(context.Context, *WithPasswordRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedUserServiceServer) Logout(context.Context, *WithNothingRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedUserServiceServer) Register(context.Context, *WithPasswordRequest) (*CodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*WithPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithNothingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Logout(ctx, req.(*WithNothingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*WithPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserService_Logout_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
